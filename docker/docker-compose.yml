services:
  api:
    build:
      context: ..  # Убедитесь, что контекст указывает на правильный путь
      dockerfile: ./docker/Dockerfile.api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - MYSQL_ADMINS_HOST=mysql_admins
      - MYSQL_ADMINS_USER=user
      - MYSQL_ADMINS_PASSWORD=spore23
      - MYSQL_ADMINS_DATABASE=admins_db
      - MYSQL_ORDERS_HOST=mysql_orders
      - MYSQL_ORDERS_USER=user
      - MYSQL_ORDERS_PASSWORD=spore23
      - MYSQL_ORDERS_DATABASE=orders_db
      - MYSQL_PRODUCTS_HOST=mysql_products
      - MYSQL_PRODUCTS_USER=user
      - MYSQL_PRODUCTS_PASSWORD=spore23
      - MYSQL_PRODUCTS_DATABASE=products_db
      - MYSQL_CUSTOMERS_HOST=mysql_customers
      - MYSQL_CUSTOMERS_USER=user
      - MYSQL_CUSTOMERS_PASSWORD=spore23
      - MYSQL_CUSTOMERS_DATABASE=customers_db
    volumes:
      - ../api/src:/usr/src/app/api/src  # Добавляем volume для синхронизации кода
    depends_on:
      - mysql_orders
      - mysql_products
      - mysql_customers
      - mysql_admins  # Добавляем зависимость от новой базы данных
    entrypoint: ["/bin/sh", "-c", "sleep 30 && node index.js"]  # Добавляем задержку перед запуском

  nginx:
    build:
      context: ..  # Убедитесь, что контекст указывает на правильный путь
      dockerfile: ./docker/Dockerfile.nginx
    ports:
      - "8080:80"
    depends_on:
      - api
    volumes:
      - ../nginx/default.conf:/etc/nginx/conf.d/default.conf

  mysql_orders:
    image: mysql:8.0
    container_name: mysql_orders
    environment:
      MYSQL_ROOT_PASSWORD: spore23
      MYSQL_DATABASE: orders_db
      MYSQL_USER: user
      MYSQL_PASSWORD: spore23
    ports:
      - "3307:3306"
    volumes:
      - mysql-orders-data:/var/lib/mysql
      - ./docker/init-orders-db.sql:/docker-entrypoint-initdb.d/init-orders-db.sql  # SQL скрипт для orders_db

  mysql_products:
    image: mysql:8.0
    container_name: mysql_products
    environment:
      MYSQL_ROOT_PASSWORD: spore23
      MYSQL_DATABASE: products_db
      MYSQL_USER: user
      MYSQL_PASSWORD: spore23
    ports:
      - "3305:3306"
    volumes:
      - mysql-products-data:/var/lib/mysql
      - ./docker/init-products-db.sql:/docker-entrypoint-initdb.d/init-products-db.sql

  mysql_customers:
    image: mysql:8.0
    container_name: mysql_customers
    environment:
      MYSQL_ROOT_PASSWORD: spore23
      MYSQL_DATABASE: customers_db
      MYSQL_USER: user
      MYSQL_PASSWORD: spore23
    ports:
      - "3308:3306"
    volumes:
      - mysql-customers-data:/var/lib/mysql
      - ./docker/init-customers-db.sql:/docker-entrypoint-initdb.d/init-customers-db.sql  # SQL скрипт для customers_db

  mysql_admins:  # Новая база данных для учетных записей администраторов
    build:
      context: ..  # Указываем контекст текущей папки, где находится Dockerfile.mysql и init-admins-db.sql
      dockerfile: ./docker/Dockerfile.mysql  # Используем кастомный Dockerfile для MySQL
    container_name: mysql_admins
    environment:
      MYSQL_ROOT_PASSWORD: spore23
      MYSQL_DATABASE: admins_db  # Название базы данных
      MYSQL_USER: user
      MYSQL_PASSWORD: spore23
    ports:
      - "3309:3306"  # Используем другой порт, чтобы избежать конфликта
    volumes:
      - mysql-admins-data:/var/lib/mysql  # Добавляем volume для хранения данных
      - ./docker/init-admins-db.sql:/docker-entrypoint-initdb.d/init-admins-db.sql  # SQL скрипт для admins_db

volumes:
  mysql-orders-data:
  mysql-products-data:
  mysql-customers-data:
  mysql-admins-data:  # Volume для базы данных администраторов
