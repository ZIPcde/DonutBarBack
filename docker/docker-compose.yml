# docker\docker-compose.yml

services:
  api:
    build:
      context: .. # Корневой контекст для API
      dockerfile: ./docker/Dockerfile.api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - MYSQL_ADMINS_HOST=mysql_admins
      - MYSQL_ADMINS_USER=user
      - MYSQL_ADMINS_PASSWORD=spore23
      - MYSQL_ADMINS_DATABASE=admins_db
      - MYSQL_ORDERS_HOST=mysql_orders
      - MYSQL_ORDERS_USER=user
      - MYSQL_ORDERS_PASSWORD=spore23
      - MYSQL_ORDERS_DATABASE=orders_db
      - MYSQL_PRODUCTS_HOST=mysql_products
      - MYSQL_PRODUCTS_USER=user
      - MYSQL_PRODUCTS_PASSWORD=spore23
      - MYSQL_PRODUCTS_DATABASE=products_db
      - MYSQL_CUSTOMERS_HOST=mysql_customers
      - MYSQL_CUSTOMERS_USER=user
      - MYSQL_CUSTOMERS_PASSWORD=spore23
      - MYSQL_CUSTOMERS_DATABASE=customers_db
    volumes:
      - ../api/src:/usr/src/app/api/src
      - ./uploads:/usr/src/app/uploads
    depends_on:
      - mysql_orders
      - mysql_products
      - mysql_customers
      - mysql_admins
    entrypoint: [ "/bin/sh", "-c", "sleep 30 && node index.js" ]

  # Сервис для site1
  nginx_site1_clients:
    build:
      context: .. # Корневой контекст для Nginx
      dockerfile: ./docker/Dockerfile.site1 # Используется Dockerfile для site1
    ports:
      - "8080:80" # Первый сайт на порту 8080
    depends_on:
      - api
    volumes:
      - ./nginx.site1.conf:/etc/nginx/nginx.conf:ro # Конфигурация для site1
      - ./site1/dist:/usr/share/nginx/html:ro # Статические файлы для site1
    restart: always

  # Сервис для site2
  nginx_site2_staff:
    build:
      context: .. # Корневой контекст для Nginx
      dockerfile: ./docker/Dockerfile.site2 # Используется Dockerfile для site2
    ports:
      - "8081:80" # Второй сайт на порту 8081
    depends_on:
      - api
    volumes:
      - ./nginx.site2.conf:/etc/nginx/nginx.conf:ro # Конфигурация для site2
      - ./site2/dist:/usr/share/nginx/html:ro # Статические файлы для site2
    restart: always

  mysql_orders:
    image: mysql:8.0
    container_name: mysql_orders
    environment:
      MYSQL_ROOT_PASSWORD: spore23
      MYSQL_DATABASE: orders_db
      MYSQL_USER: user
      MYSQL_PASSWORD: spore23
    ports:
      - "3307:3306"
    volumes:
      - mysql-orders-data:/var/lib/mysql
      - ./init-orders-db.sql:/docker-entrypoint-initdb.d/init-orders-db.sql

  mysql_products:
    image: mysql:8.0
    container_name: mysql_products
    environment:
      MYSQL_ROOT_PASSWORD: spore23
      MYSQL_DATABASE: products_db
      MYSQL_USER: user
      MYSQL_PASSWORD: spore23
    ports:
      - "3305:3306"
    volumes:
      - mysql-products-data:/var/lib/mysql
      - ./init-products-db.sql:/docker-entrypoint-initdb.d/init-products-db.sql

  mysql_customers:
    image: mysql:8.0
    container_name: mysql_customers
    environment:
      MYSQL_ROOT_PASSWORD: spore23
      MYSQL_DATABASE: customers_db
      MYSQL_USER: user
      MYSQL_PASSWORD: spore23
    ports:
      - "3308:3306"
    volumes:
      - mysql-customers-data:/var/lib/mysql
      - ./init-customers-db.sql:/docker-entrypoint-initdb.d/init-customers-db.sql

  mysql_admins:
    build:
      context: .. # Контекст для сборки
      dockerfile: ./docker/Dockerfile.mysql
    container_name: mysql_admins
    environment:
      MYSQL_ROOT_PASSWORD: spore23
      MYSQL_DATABASE: admins_db
      MYSQL_USER: user
      MYSQL_PASSWORD: spore23
    ports:
      - "3309:3306"
    volumes:
      - mysql-admins-data:/var/lib/mysql
      - ./init-admins-db.sql:/docker-entrypoint-initdb.d/init-admins-db.sql

volumes:
  mysql-orders-data:
  mysql-products-data:
  mysql-customers-data:
  mysql-admins-data:
